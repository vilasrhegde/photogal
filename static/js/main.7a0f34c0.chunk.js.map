{"version":3,"sources":["firebase/config.js","comps/hooks/UseFirestore.js","comps/ImageGrid.js","comps/Title.js","comps/hooks/useStorage.js","comps/Progress.js","comps/UploadForm.js","App.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","projectStorage","getStorage","db","getFirestore","useFirestore","collections","useState","docs","setDocs","useEffect","onSnapshot","collection","snapshot","map","doc","data","ImageGrid","console","log","className","key","id","src","URL","alt","title","Title","useStorage","file","progress","setProgress","error","setError","url","setUrl","storageRef","ref","name","collectionRef","uploadTask","uploadBytesResumable","on","percentage","Math","round","bytesTransferred","totalBytes","err","a","getDownloadURL","then","downloadURL","createdAt","serverTimestamp","addDoc","CreatedAt","Progress","setFile","style","width","UploadForm","types","action","type","onChange","e","selected","target","files","includes","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a0f34c0.chunk.js","sourcesContent":["\r\n\r\n// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getFirestore, serverTimestamp  } from 'firebase/firestore';// TODO: Add SDKs for Firebase products that you want to use\r\nimport { getStorage } from \"firebase/storage\";\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBjxfLc3WuSIyQH7nQkIYVoBgQNsHty8hw\",\r\n  authDomain: \"photogal-95114.firebaseapp.com\",\r\n  projectId: \"photogal-95114\",\r\n  storageBucket: \"photogal-95114.appspot.com\",\r\n  messagingSenderId: \"1056679737398\",\r\n  appId: \"1:1056679737398:web:166a31c8c6f70258438097\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n\r\nconst projectStorage = getStorage(app);\r\nconst db = getFirestore();\r\n\r\n\r\nexport {  projectStorage,db}","// import { collection } from 'firebase/firestore';\r\nimport { useEffect, useState } from 'react';\r\nimport { db } from '../../firebase/config';\r\nimport { collection, onSnapshot } from 'firebase/firestore';\r\n\r\n   \r\nconst useFirestore = (collections) =>{\r\n    const [ docs,setDocs]  = useState([]);\r\n\r\n    useEffect(() =>{\r\n     onSnapshot(collection(db,collections),(snapshot) =>{\r\n      // console.log(snapshot.docs.map(doc => doc.data() ));\r\n      setDocs(snapshot.docs.map(doc => doc.data() ));\r\n    });\r\n  },[]);\r\n    return { docs };\r\n    \r\n    \r\n}\r\n\r\nexport default useFirestore;\r\n\r\n","\r\nimport React from \"react\";\r\nimport useFirestore from \"./hooks/UseFirestore\";\r\n\r\n\r\nconst ImageGrid = () =>{\r\n    const { docs } = useFirestore('images');\r\n    console.log(docs);\r\n\r\n    return(\r\n\r\n        <div className=\"img-grid\">\r\n            { docs && docs.map(doc => (\r\n                <div className=\"img-wrap\" key={doc.id}>\r\n                    <img src={doc.URL} alt=\"Uploaded Pic\" title=\"Just embrace it\"/>\r\n                </div>\r\n                \r\n            ))}    \r\n        </div>\r\n    \r\n        \r\n    )\r\n}\r\nexport default ImageGrid;","import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>PhotoGal</h1>\n      <h2>Your Pictures</h2>\n      <p>Save and view your pictures on Firebase.</p>\n    </div>\n  )\n}\n\nexport default Title;","import { useState, useEffect } from 'react';\r\nimport { projectStorage,db} from '../../firebase/config';\r\nimport { ref, getDownloadURL, uploadBytesResumable } from \"firebase/storage\";\r\nimport { collection, addDoc,serverTimestamp } from \"firebase/firestore\"; \r\n\r\n\r\nconst useStorage = (file) => {\r\n  const [progress, setProgress] = useState(0);\r\n  const [error, setError] = useState(null);\r\n  const [url, setUrl] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // references\r\n    const storageRef = ref(projectStorage,`files/${file.name}`);\r\n    const collectionRef = collection(db,'images');\r\n    const uploadTask = uploadBytesResumable(storageRef, file);\r\n\r\n    uploadTask.on(\"state_changed\",\r\n      (snapshot)=> {\r\n      let percentage = Math.round((snapshot.bytesTransferred / snapshot.totalBytes) * 100);\r\n      setProgress(percentage);\r\n    }, (err) => {\r\n      setError(err);\r\n    },\r\n    async () => {\r\n      const url = await getDownloadURL(uploadTask.snapshot.ref).then((downloadURL)=>{\r\n\r\n        setUrl(downloadURL);\r\n        var createdAt = serverTimestamp();\r\n        addDoc(collectionRef,{\r\n            URL:downloadURL,\r\n            CreatedAt:createdAt\r\n        })\r\n        .then(()=>{\r\n            console.log(\"URL inserted!\");\r\n            // window.location.href=window.location.href;\r\n        })\r\n      });\r\n\r\n     \r\n\r\n      \r\n\r\n    });\r\n\r\n  \r\n  }, [file]);\r\n\r\n  return { progress, url, error };\r\n}\r\n \r\nexport default useStorage;","import React, { useEffect } from 'react'\r\nimport  useStorage  from './hooks/useStorage'\r\n\r\nconst Progress = ({file,setFile}) =>{\r\n    const { url, progress } = useStorage(file);  \r\n    console.log(progress,url);\r\n\r\n    useEffect(() =>{\r\n        if(url){\r\n            setFile(null);\r\n        }\r\n    },[url,setFile])\r\n    return (\r\n        <div className=\"progress-bar\" style={{ width:progress + '%'  }}></div>\r\n    )\r\n}\r\n\r\nexport default Progress;\r\n","import React, { useState } from 'react'\r\nimport Progress from './Progress';\r\n\r\nexport const UploadForm = () => {\r\n\r\n    const types = ['image/jpeg','image/png']\r\n    const [file,setFile] = useState(null);\r\n    const[error,setError] = useState(null);\r\n\r\n    const changeHandler = (e) =>{\r\n        console.log('File picked');\r\n        let selected = e.target.files[0];\r\n        console.log(selected);\r\n\r\n        if(selected && types.includes(selected.type)){\r\n            setFile(selected);\r\n            setError('');\r\n            \r\n        }\r\n        else{\r\n            setFile(null);\r\n            setError(\"Please select only image file (png or jpeg)\");\r\n        }\r\n    }\r\n\r\n\r\n  return (\r\n    <form action=\"\">\r\n        <label>\r\n        <input type=\"file\" onChange={changeHandler} />\r\n        <span>+</span>\r\n      </label>        <div className='output'>\r\n            { error && <div className='error'>{ error }</div> }\r\n            { file && <div >{ file.name }</div> }\r\n            { file && <Progress file={file} setFile={setFile} />}\r\n        </div>\r\n    </form>\r\n  )\r\n}\r\n","import React from 'react';\nimport ImageGrid from './comps/ImageGrid';\nimport Title from './comps/Title';\n\nimport { UploadForm } from './comps/UploadForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Title/>\n      <UploadForm />\n      <ImageGrid />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}